# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

export HOST_USERNAME=$USER
export LOOPBACK=10.0.2.2

# LACROSSE

export GIT_URL="<GitHub Repositiory Url for Lacrosse>"
export SCANTRON_GITHUB_PAT="<GitHub Personal Access Token>"
export LACROSSE_GITHUB_PAT="<GitHub Personal Access Token>"

export SP_PASSWD="<Azure Service Principal Secret>"
export SP_APP_ID="<Azure Service Principal App ID>"
export COMPETITION_API_KEY_ID="<AIxCC Competition API Key ID>"
export COMPETITION_API_KEY_TOKEN="<AIxCC Competition API Key Token>"
export CRS_API_KEY_ID="<CRS API Key ID>"
export CRS_API_KEY_TOKEN="<CRS API Key Token>"
export COMPETITION_API_TEAM_ID="<AIxCC Competition API Key ID>"
export COMPETITION_API_TEAM_SECRET="<AIxCC Competition API Key Token>"

export CRS_TAILSCALE_ENDPOINT=""
export CRS_LAX_RELEASE_TAG="v1.4.0"

export COMPETITION_API_ENDPOINT=""
export COMPETITION_API_TEAM_ENDPOINT=""

# API keys for LLM providers
export AZURE_API_BASE="https://eastus2aoi.openai.azure.com/"

# Development LLM API keys
export OPENAI_API_KEY="<OpenAI API Key>"
export ANTHROPIC_API_KEY="<Anthropic API Key>"
export GEMINI_API_KEY="<Google Gemini API Key>"

export OTEL_EXPORTER_OTLP_ENDPOINT=""
export OTEL_EXPORTER_OTLP_HEADERS="<Telemetry endpoint auth headers>"
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
###

export HOST_AIXCC_CP_ROOT="/mnt/netapp/cp_root"
export HOST_AIXCC_CRS_SCRATCH_SPACE="/mnt/netapp/crs_scratch"

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Stop old possibly-busted service, then start it properly.
# Note this is only a good idea since there is only one job at a time on this Jenks.
# Also note cannot use a tools/start-docker-daemon, for ex, b/c wont get DOCKER_HOST set right outside tool.
#systemctl --user stop docker.service
systemctl --user set-environment DOCKERD_ROOTLESS_ROOTLESSKIT_DISABLE_HOST_LOOPBACK=false
systemctl --user set-environment DOCKERD_ROOTLESS_ROOTLESSKIT_ALLOW_HOST_LOOPBACK=true
systemctl --user set-environment DOCKERD_ROOTLESS_ROOTLESSKIT_NET=slirp4netns
systemctl --user set-environment DOCKERD_ROOTLESS_ROOTLESSKIT_PORT_DRIVER=slirp4netns
eval "$(docker-rootless-init)"

while (! docker stats --no-stream ); do
  echo "Waiting for Docker to launch..."
  sleep 1
done

export LOOPBACK=10.0.2.2


# LACROSSE bash aliases
export LACROSSE_HOME=/home/$(id -un)/git-repo/crs
export PATH="${LACROSSE_HOME}/code/tools:$PATH"
export PATH="${LACROSSE_HOME}/code/prt:$PATH"
alias lax="cd $LACROSSE_HOME/.."
alias laxc="cd $LACROSSE_HOME/code"
alias laxt="cd $LACROSSE_HOME/code/test"
alias laxto="cd $LACROSSE_HOME/code/tools"
alias laxd="cd $LACROSSE_HOME/code/docker"
alias laxr='cd "$(ls -1td "$LACROSSE_HOME"/code/test/results/* | head -n 1)"'

export PATH=${LACROSSE_HOME}/code/tools:${LACROSSE_HOME}/code/prt:/home/$USERNAME/bin/:$PATH

# Always start a new ssh-agent for this terminal
#eval "$(ssh-agent -s)" > /dev/null
[ -z "$SSH_AUTH_SOCK" ] && eval "$(ssh-agent -s)" > /dev/null

# Add key if not already added in this agent
ssh-add -l | grep -q "id_azure" || ssh-add ~/.ssh/id_azure 2>/dev/null

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
