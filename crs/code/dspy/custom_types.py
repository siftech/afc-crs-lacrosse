from pydantic import BaseModel, Field, validator, model_validator
from typing import List, Optional, Tuple, Dict, Union, TYPE_CHECKING
import json

class Dumpable():
    def __str__(self):
        return self.model_dump_json(indent=2)

class FileRepair(BaseModel, Dumpable):
    target_filepath: str = Field(description="A relative filepath for the file to be fixed.")
    target_function_names: List[str] = Field(description="The list of function names, defined in this particular target filepath, whose bodies must be changed to implement the repair.")
    repair_plan: str = Field(description="The plan for how to repair the target file, which much address all of the target functions.")
    
    @model_validator(mode='before')
    @classmethod
    def replace_null_with_list(cls, values):
        if values.get("target_function_names") is None:
            values["target_function_names"] = []
        return values

class Vulnerability(BaseModel, Dumpable):
    description: str = Field(description="A description of the vulnerability, as grounded as possible in specifics (involved functions, variables, lines of code).")
    cwe: str = Field(description="The Common Weakness Enumeration (CWE) associated with this vulnerability.")
    suggested_file_repairs: List[FileRepair] = Field(description="A list of suggested repairs, separated by file, that together will address the vulnerability. (If there's only one file being repaired this list should have length one.)")
    notes: Optional[str] = Field(description="Any extra brief noteworthy details about the code that might be useful in planning or implementing a repair, if any.")

class ScoredVulnerability(Vulnerability):
    score: float = Field(description="A score for the quality of the vulnerability.")

class PatchWithFeedback(BaseModel, Dumpable):
    patch: str = Field(description="A unified diff representing a patch for one or more vulnerabilities in some codebase.")
    feedback: str = Field(description="Feedback about the patch, generated by automated testing.")
    passed: bool = Field(description="Whether the patch passed all test stages.")
    score: Optional[int] = Field(description="The number of test stages passed.")
    


