from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class TypesPatchSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patch=None):  # noqa: E501
        """TypesPatchSubmission - a model defined in OpenAPI

        :param patch: The patch of this TypesPatchSubmission.  # noqa: E501
        :type patch: str
        """
        self.openapi_types = {
            'patch': str
        }

        self.attribute_map = {
            'patch': 'patch'
        }

        self._patch = patch

    @classmethod
    def from_dict(cls, dikt) -> 'TypesPatchSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The types.PatchSubmission of this TypesPatchSubmission.  # noqa: E501
        :rtype: TypesPatchSubmission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patch(self) -> str:
        """Gets the patch of this TypesPatchSubmission.

        Base64 encoded patch in unified diff format  100KiB max size before Base64 encoding  # noqa: E501

        :return: The patch of this TypesPatchSubmission.
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch: str):
        """Sets the patch of this TypesPatchSubmission.

        Base64 encoded patch in unified diff format  100KiB max size before Base64 encoding  # noqa: E501

        :param patch: The patch of this TypesPatchSubmission.
        :type patch: str
        """
        if patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")  # noqa: E501

        self._patch = patch
