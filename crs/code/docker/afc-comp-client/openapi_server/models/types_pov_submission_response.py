from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.types_submission_status import TypesSubmissionStatus
from openapi_server import util

from openapi_server.models.types_submission_status import TypesSubmissionStatus  # noqa: E501

class TypesPOVSubmissionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pov_id=None, status=None):  # noqa: E501
        """TypesPOVSubmissionResponse - a model defined in OpenAPI

        :param pov_id: The pov_id of this TypesPOVSubmissionResponse.  # noqa: E501
        :type pov_id: str
        :param status: The status of this TypesPOVSubmissionResponse.  # noqa: E501
        :type status: TypesSubmissionStatus
        """
        self.openapi_types = {
            'pov_id': str,
            'status': TypesSubmissionStatus
        }

        self.attribute_map = {
            'pov_id': 'pov_id',
            'status': 'status'
        }

        self._pov_id = pov_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'TypesPOVSubmissionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The types.POVSubmissionResponse of this TypesPOVSubmissionResponse.  # noqa: E501
        :rtype: TypesPOVSubmissionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pov_id(self) -> str:
        """Gets the pov_id of this TypesPOVSubmissionResponse.


        :return: The pov_id of this TypesPOVSubmissionResponse.
        :rtype: str
        """
        return self._pov_id

    @pov_id.setter
    def pov_id(self, pov_id: str):
        """Sets the pov_id of this TypesPOVSubmissionResponse.


        :param pov_id: The pov_id of this TypesPOVSubmissionResponse.
        :type pov_id: str
        """
        if pov_id is None:
            raise ValueError("Invalid value for `pov_id`, must not be `None`")  # noqa: E501

        self._pov_id = pov_id

    @property
    def status(self) -> TypesSubmissionStatus:
        """Gets the status of this TypesPOVSubmissionResponse.


        :return: The status of this TypesPOVSubmissionResponse.
        :rtype: TypesSubmissionStatus
        """
        return self._status

    @status.setter
    def status(self, status: TypesSubmissionStatus):
        """Sets the status of this TypesPOVSubmissionResponse.


        :param status: The status of this TypesPOVSubmissionResponse.
        :type status: TypesSubmissionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
