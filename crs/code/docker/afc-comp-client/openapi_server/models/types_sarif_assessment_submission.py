from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.types_assessment import TypesAssessment
from openapi_server import util

from openapi_server.models.types_assessment import TypesAssessment  # noqa: E501

class TypesSarifAssessmentSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment=None, description=None):  # noqa: E501
        """TypesSarifAssessmentSubmission - a model defined in OpenAPI

        :param assessment: The assessment of this TypesSarifAssessmentSubmission.  # noqa: E501
        :type assessment: TypesAssessment
        :param description: The description of this TypesSarifAssessmentSubmission.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'assessment': TypesAssessment,
            'description': str
        }

        self.attribute_map = {
            'assessment': 'assessment',
            'description': 'description'
        }

        self._assessment = assessment
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'TypesSarifAssessmentSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The types.SarifAssessmentSubmission of this TypesSarifAssessmentSubmission.  # noqa: E501
        :rtype: TypesSarifAssessmentSubmission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment(self) -> TypesAssessment:
        """Gets the assessment of this TypesSarifAssessmentSubmission.


        :return: The assessment of this TypesSarifAssessmentSubmission.
        :rtype: TypesAssessment
        """
        return self._assessment

    @assessment.setter
    def assessment(self, assessment: TypesAssessment):
        """Sets the assessment of this TypesSarifAssessmentSubmission.


        :param assessment: The assessment of this TypesSarifAssessmentSubmission.
        :type assessment: TypesAssessment
        """
        if assessment is None:
            raise ValueError("Invalid value for `assessment`, must not be `None`")  # noqa: E501

        self._assessment = assessment

    @property
    def description(self) -> str:
        """Gets the description of this TypesSarifAssessmentSubmission.

        Plain text reasoning for the assessment  128KiB max size  # noqa: E501

        :return: The description of this TypesSarifAssessmentSubmission.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this TypesSarifAssessmentSubmission.

        Plain text reasoning for the assessment  128KiB max size  # noqa: E501

        :param description: The description of this TypesSarifAssessmentSubmission.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 131072:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `131072`")  # noqa: E501

        self._description = description
