from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.types_submission_status import TypesSubmissionStatus
from openapi_server import util

from openapi_server.models.types_submission_status import TypesSubmissionStatus  # noqa: E501

class TypesPatchSubmissionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, functionality_tests_passing=None, patch_id=None, status=None):  # noqa: E501
        """TypesPatchSubmissionResponse - a model defined in OpenAPI

        :param functionality_tests_passing: The functionality_tests_passing of this TypesPatchSubmissionResponse.  # noqa: E501
        :type functionality_tests_passing: bool
        :param patch_id: The patch_id of this TypesPatchSubmissionResponse.  # noqa: E501
        :type patch_id: str
        :param status: The status of this TypesPatchSubmissionResponse.  # noqa: E501
        :type status: TypesSubmissionStatus
        """
        self.openapi_types = {
            'functionality_tests_passing': bool,
            'patch_id': str,
            'status': TypesSubmissionStatus
        }

        self.attribute_map = {
            'functionality_tests_passing': 'functionality_tests_passing',
            'patch_id': 'patch_id',
            'status': 'status'
        }

        self._functionality_tests_passing = functionality_tests_passing
        self._patch_id = patch_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'TypesPatchSubmissionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The types.PatchSubmissionResponse of this TypesPatchSubmissionResponse.  # noqa: E501
        :rtype: TypesPatchSubmissionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def functionality_tests_passing(self) -> bool:
        """Gets the functionality_tests_passing of this TypesPatchSubmissionResponse.

        null indicates the tests have not been run  # noqa: E501

        :return: The functionality_tests_passing of this TypesPatchSubmissionResponse.
        :rtype: bool
        """
        return self._functionality_tests_passing

    @functionality_tests_passing.setter
    def functionality_tests_passing(self, functionality_tests_passing: bool):
        """Sets the functionality_tests_passing of this TypesPatchSubmissionResponse.

        null indicates the tests have not been run  # noqa: E501

        :param functionality_tests_passing: The functionality_tests_passing of this TypesPatchSubmissionResponse.
        :type functionality_tests_passing: bool
        """

        self._functionality_tests_passing = functionality_tests_passing

    @property
    def patch_id(self) -> str:
        """Gets the patch_id of this TypesPatchSubmissionResponse.


        :return: The patch_id of this TypesPatchSubmissionResponse.
        :rtype: str
        """
        return self._patch_id

    @patch_id.setter
    def patch_id(self, patch_id: str):
        """Sets the patch_id of this TypesPatchSubmissionResponse.


        :param patch_id: The patch_id of this TypesPatchSubmissionResponse.
        :type patch_id: str
        """
        if patch_id is None:
            raise ValueError("Invalid value for `patch_id`, must not be `None`")  # noqa: E501

        self._patch_id = patch_id

    @property
    def status(self) -> TypesSubmissionStatus:
        """Gets the status of this TypesPatchSubmissionResponse.


        :return: The status of this TypesPatchSubmissionResponse.
        :rtype: TypesSubmissionStatus
        """
        return self._status

    @status.setter
    def status(self, status: TypesSubmissionStatus):
        """Sets the status of this TypesPatchSubmissionResponse.


        :param status: The status of this TypesPatchSubmissionResponse.
        :type status: TypesSubmissionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
