from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.types_architecture import TypesArchitecture
from openapi_server import util

from openapi_server.models.types_architecture import TypesArchitecture  # noqa: E501

class TypesPOVSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture=None, engine=None, fuzzer_name=None, sanitizer=None, testcase=None):  # noqa: E501
        """TypesPOVSubmission - a model defined in OpenAPI

        :param architecture: The architecture of this TypesPOVSubmission.  # noqa: E501
        :type architecture: TypesArchitecture
        :param engine: The engine of this TypesPOVSubmission.  # noqa: E501
        :type engine: str
        :param fuzzer_name: The fuzzer_name of this TypesPOVSubmission.  # noqa: E501
        :type fuzzer_name: str
        :param sanitizer: The sanitizer of this TypesPOVSubmission.  # noqa: E501
        :type sanitizer: str
        :param testcase: The testcase of this TypesPOVSubmission.  # noqa: E501
        :type testcase: str
        """
        self.openapi_types = {
            'architecture': TypesArchitecture,
            'engine': str,
            'fuzzer_name': str,
            'sanitizer': str,
            'testcase': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'engine': 'engine',
            'fuzzer_name': 'fuzzer_name',
            'sanitizer': 'sanitizer',
            'testcase': 'testcase'
        }

        self._architecture = architecture
        self._engine = engine
        self._fuzzer_name = fuzzer_name
        self._sanitizer = sanitizer
        self._testcase = testcase

    @classmethod
    def from_dict(cls, dikt) -> 'TypesPOVSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The types.POVSubmission of this TypesPOVSubmission.  # noqa: E501
        :rtype: TypesPOVSubmission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self) -> TypesArchitecture:
        """Gets the architecture of this TypesPOVSubmission.


        :return: The architecture of this TypesPOVSubmission.
        :rtype: TypesArchitecture
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture: TypesArchitecture):
        """Sets the architecture of this TypesPOVSubmission.


        :param architecture: The architecture of this TypesPOVSubmission.
        :type architecture: TypesArchitecture
        """
        if architecture is None:
            raise ValueError("Invalid value for `architecture`, must not be `None`")  # noqa: E501

        self._architecture = architecture

    @property
    def engine(self) -> str:
        """Gets the engine of this TypesPOVSubmission.

        Fuzz Tooling Engine that exercises this vuln. Allowable engine values are specified in project.yaml.  4KiB max size  # noqa: E501

        :return: The engine of this TypesPOVSubmission.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine: str):
        """Sets the engine of this TypesPOVSubmission.

        Fuzz Tooling Engine that exercises this vuln. Allowable engine values are specified in project.yaml.  4KiB max size  # noqa: E501

        :param engine: The engine of this TypesPOVSubmission.
        :type engine: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")  # noqa: E501
        if engine is not None and len(engine) > 4096:
            raise ValueError("Invalid value for `engine`, length must be less than or equal to `4096`")  # noqa: E501

        self._engine = engine

    @property
    def fuzzer_name(self) -> str:
        """Gets the fuzzer_name of this TypesPOVSubmission.

        Fuzz Tooling fuzzer that exercises this vuln  4KiB max size  # noqa: E501

        :return: The fuzzer_name of this TypesPOVSubmission.
        :rtype: str
        """
        return self._fuzzer_name

    @fuzzer_name.setter
    def fuzzer_name(self, fuzzer_name: str):
        """Sets the fuzzer_name of this TypesPOVSubmission.

        Fuzz Tooling fuzzer that exercises this vuln  4KiB max size  # noqa: E501

        :param fuzzer_name: The fuzzer_name of this TypesPOVSubmission.
        :type fuzzer_name: str
        """
        if fuzzer_name is None:
            raise ValueError("Invalid value for `fuzzer_name`, must not be `None`")  # noqa: E501
        if fuzzer_name is not None and len(fuzzer_name) > 4096:
            raise ValueError("Invalid value for `fuzzer_name`, length must be less than or equal to `4096`")  # noqa: E501

        self._fuzzer_name = fuzzer_name

    @property
    def sanitizer(self) -> str:
        """Gets the sanitizer of this TypesPOVSubmission.

        Fuzz Tooling Sanitizer that exercises this vuln  4KiB max size  # noqa: E501

        :return: The sanitizer of this TypesPOVSubmission.
        :rtype: str
        """
        return self._sanitizer

    @sanitizer.setter
    def sanitizer(self, sanitizer: str):
        """Sets the sanitizer of this TypesPOVSubmission.

        Fuzz Tooling Sanitizer that exercises this vuln  4KiB max size  # noqa: E501

        :param sanitizer: The sanitizer of this TypesPOVSubmission.
        :type sanitizer: str
        """
        if sanitizer is None:
            raise ValueError("Invalid value for `sanitizer`, must not be `None`")  # noqa: E501
        if sanitizer is not None and len(sanitizer) > 4096:
            raise ValueError("Invalid value for `sanitizer`, length must be less than or equal to `4096`")  # noqa: E501

        self._sanitizer = sanitizer

    @property
    def testcase(self) -> str:
        """Gets the testcase of this TypesPOVSubmission.

        Base64 encoded vuln trigger  2MiB max size before Base64 encoding  # noqa: E501

        :return: The testcase of this TypesPOVSubmission.
        :rtype: str
        """
        return self._testcase

    @testcase.setter
    def testcase(self, testcase: str):
        """Sets the testcase of this TypesPOVSubmission.

        Base64 encoded vuln trigger  2MiB max size before Base64 encoding  # noqa: E501

        :param testcase: The testcase of this TypesPOVSubmission.
        :type testcase: str
        """
        if testcase is None:
            raise ValueError("Invalid value for `testcase`, must not be `None`")  # noqa: E501

        self._testcase = testcase
